(this.webpackJsonppathfinder=this.webpackJsonppathfinder||[]).push([[0],{47:function(e,t,a){e.exports=a(68)},53:function(e,t,a){},54:function(e,t,a){},55:function(e,t,a){},58:function(e,t,a){},65:function(e,t,a){},66:function(e,t,a){},68:function(e,t,a){"use strict";a.r(t);var n=a(0),i=a.n(n),s=a(23),o=a.n(s),r=(a(52),a(53),a(54),a(6)),l=a(7),d=a(19),u=a(10),c=a(9),h=a(31),v=a(38),g=a(45),m=a(32);a(55);function f(e){return i.a.createElement(i.a.Fragment,null,i.a.createElement(m.a,{show:e.showModal,onHide:function(){return e.toggleShowModal()},backdrop:"static",keyboard:!1,className:"modal",centered:!0},i.a.createElement(m.a.Header,{closeButton:!0},i.a.createElement(m.a.Title,{className:"modal__title"},"HOW TO USE ?")),i.a.createElement(m.a.Body,null,i.a.createElement("div",{className:"modal__content"},i.a.createElement("div",{className:"modal__body"},i.a.createElement("div",{className:"row row__1"},i.a.createElement("div",{className:"start flex"},i.a.createElement("div",{className:"start__color"}),i.a.createElement("p",null,"START")),i.a.createElement("div",{className:"end flex"},i.a.createElement("div",{className:"end__color"}),i.a.createElement("p",null,"END"))),i.a.createElement("div",{className:" row row__2"},i.a.createElement("div",{className:"wall flex"},i.a.createElement("div",{className:"wall__color"}),i.a.createElement("p",null,"WAll")),i.a.createElement("div",{className:"visited flex"},i.a.createElement("div",{className:"visited__color"}),i.a.createElement("p",null,"VISITED"))),i.a.createElement("div",{className:"row row__3"},i.a.createElement("div",{className:"shortest flex"},i.a.createElement("div",{className:"shortest__color"}),i.a.createElement("p",null,"SHORTEST")))),i.a.createElement("div",{className:"info"},i.a.createElement("div",{className:"info__info"},"1. YOU CAN MAKE WALL BY CLICKING AND BLOCK"),i.a.createElement("div",{className:"info__info"},"2. YOU CAN MOVE"," ",i.a.createElement("div",{style:{height:"20px",width:"20px",border:"2px solid black",backgroundColor:"black",display:"inline-block"}})," ","BY DRAGGING"," "),i.a.createElement("div",{className:"info__info"},"3. YOU CAN CHOOSE ALGORITHM AND SPEED FROM SELECT BOX"))))))}var p=a(42),w=a.n(p),E=(a(58),function(e){Object(u.a)(a,e);var t=Object(c.a)(a);function a(e){var n;return Object(r.a)(this,a),(n=t.call(this,e)).onSpeedChangeHandler=function(e){e.target&&e.target.value&&(n.props.changeSpeed(e.target.value),n.setState({speedValue:e.target.value}))},n.onAlgoChangeHandler=function(e){e.target&&e.target.value&&(n.props.changeAlgo(e.target.value),n.setState({algoValue:e.target.value}))},n.onMazeChangeHandler=function(e){e.target&&e.target.value&&(n.props.generateMaze(e.target.value),n.setState({mazeValue:e.target.value}))},n.toggleShowModal=function(){n.setState({showHelpModal:!n.state.showHelpModal})},n.state={speedValue:"Fast",algoValue:"Dijkstra",mazeValue:"No Maze",showHelpModal:!1},n}return Object(l.a)(a,[{key:"render",value:function(){var e=this;return i.a.createElement("div",{className:"nav"},i.a.createElement("div",{className:"helpModal"},i.a.createElement(f,{showModal:this.state.showHelpModal,toggleShowModal:this.toggleShowModal})),i.a.createElement(v.a,{expand:"lg",bg:"light",variant:"light",className:"flex-column border nav__navContainer"},i.a.createElement(v.a.Brand,{href:".",style:{fontWeight:"bold",marginRight:"0px"}},"PATHFINDING VISUALIZER")," ",i.a.createElement("div",{className:"selectorMenu"},i.a.createElement("select",{disabled:this.props.visualized,onChange:this.onSpeedChangeHandler,value:this.state.speedValue},i.a.createElement("option",{value:"Slow"},"Slow"),i.a.createElement("option",{value:"Average"},"Average"),i.a.createElement("option",{value:"Fast"},"Fast")),i.a.createElement("select",{disabled:this.props.visualized,onChange:this.onAlgoChangeHandler,value:this.state.algoValue},i.a.createElement("option",{value:"Dijkstra"},"Dijkstra"),i.a.createElement("option",{value:"Bellman-Ford"},"Bellman-Ford"),i.a.createElement("option",{value:"BFS"},"BFS"),i.a.createElement("option",{value:"DFS"},"DFS")),i.a.createElement("select",{disabled:this.props.visualized,onChange:this.onMazeChangeHandler,value:this.state.mazeValue},i.a.createElement("option",{value:"None"},"No Maze"),i.a.createElement("option",{value:"Random"},"Random"),i.a.createElement("option",{value:"RecursiveDivision"},"RecursiveDivision")),i.a.createElement(h.a,{className:"visualize-it-button",onClick:this.props.visualize,disabled:this.props.visualized},"Visualize"),i.a.createElement(h.a,{className:"non-visualize-button",onClick:this.props.changeWeights,disabled:this.props.visualized},"New Weights"),i.a.createElement(h.a,{className:"non-visualize-button",onClick:this.props.clearBoard,disabled:this.props.visualized},"New Board")),i.a.createElement("div",{className:"nav__footer"},i.a.createElement(h.a,{className:"how-to-use-button",disabled:this.props.visualized,onClick:function(){return e.setState({showHelpModal:!e.state.showHelpModal})}},"How To Use?"),i.a.createElement(g.a.Link,{href:"https://github.com/GunjanKadu"},i.a.createElement("span",{style:{color:"black",display:"flex",alignItems:"center",gap:"5px"}},i.a.createElement("span",{style:{marginRight:"7px"}},"Made by Gunjan Kadu"),i.a.createElement("span",null,i.a.createElement(w.a,null)))))))}}]),a}(n.Component)),b=a(44),S=(a(65),function(e){Object(u.a)(a,e);var t=Object(c.a)(a);function a(e){var n;return Object(r.a)(this,a),(n=t.call(this,e)).nodeType=function(e){return e.isEnd?"node-end":e.isStart?"node-start":e.isWall?"node-wall":" "},n.state={show:!1},n}return Object(l.a)(a,[{key:"render",value:function(){var e=this,t=this.props,a=t.col,n=t.row,s=t.onMouseDown,o=t.onMouseEnter,r=t.onMouseUp,l=t.weight,d=t.isWall,u=t.isStart,c=t.isEnd;return i.a.createElement("div",{className:"node-box",onMouseEnter:function(){e.setState({show:!0})},onMouseLeave:function(){e.setState({show:!1})}},this.state.show&&i.a.createElement(b.a,{variant:"warning",className:"alert"},i.a.createElement("p",{style:{fontWeight:"bold",fontSize:"11px"}},"Current Node Info"),i.a.createElement("p",{className:"infoNode"},"Row: ",n),i.a.createElement("p",{className:"infoNode"},"Column: ",a),i.a.createElement("p",{className:"infoNode"},"Weight: ",l),i.a.createElement("p",{className:"infoNode"},"IsStart: ",u.toString()),i.a.createElement("p",{className:"infoNode"},"IsEnd: ",c.toString()),i.a.createElement("p",{className:"infoNode"},"Is Wall: ",d.toString())),i.a.createElement("div",{id:"node-".concat(n,"-").concat(a),className:"node ".concat(this.nodeType(this.props)),onMouseDown:function(){return s(n,a)},onMouseEnter:function(){return o(n,a)},onMouseUp:function(){return r()}},i.a.createElement("p",null,l)))}}]),a}(n.Component)),N=function(){function e(){Object(r.a)(this,e),this.visitedSpeed=void 0,this.shortestSpeed=void 0,this.visitedSpeed=10,this.shortestSpeed=50}return Object(l.a)(e,[{key:"animate",value:function(e,t){for(var a=this,n=function(n){if(n===e.length)return setTimeout((function(){a.animateShortestPath(t)}),a.visitedSpeed*n),{v:void 0};setTimeout((function(){var t=e[n],a=document.getElementById("node-".concat(t.row,"-").concat(t.col));a&&(a.className="node node-visited")}),a.visitedSpeed*n)},i=0;i<=e.length;i++){var s=n(i);if("object"===typeof s)return s.v}}},{key:"animateShortestPath",value:function(e){for(var t=this,a=function(a){setTimeout((function(){var t=e[a],n=document.getElementById("node-".concat(t.row,"-").concat(t.col));n&&(n.className="node node-shortest-path")}),t.shortestSpeed*a)},n=0;n<e.length;n++)a(n)}},{key:"updateSpeed",value:function(e,t){this.visitedSpeed=e,this.shortestSpeed=t}}]),e}(),D=function(){function e(){Object(r.a)(this,e)}return Object(l.a)(e,null,[{key:"setRoworColumn",value:function(t,a){"rows"===a&&(e.DefaultRows=t),"columns"===a&&(e.DefaultColumns=t)}},{key:"setStartOrEnd",value:function(t,a){"start"===a&&(e.DEFAULT_START=t),"end"===a&&(e.DEFAULT_END=t)}}]),e}();function y(e){!function e(t,a,n,i,s,o){if(a){if(i-n<2)return;var r=2*Math.floor(k(s,o)/2);!function(e,t,a,n){for(var i=2*Math.floor(k(t,a)/2)+1,s=2*Math.floor(k(t,a)/2)+1,o=t;o<=a;o++)o!==i&&o!==s&&e.toggleWall(n,o)}(t,n,i,r),e(t,!a,n,i,s,r-1),e(t,!a,n,i,r+1,o)}else{if(o-s<2)return;var l=2*Math.floor(k(n,i)/2);!function(e,t,a,n){for(var i=2*Math.floor(k(t,a)/2)+1,s=2*Math.floor(k(t,a)/2)+1,o=t;o<=a;o++)o!==i&&o!==s&&e.toggleWall(o,n)}(t,s,o,l),e(t,!a,n,l-1,s,o),e(t,!a,l+1,i,s,o)}}(e,!0,1,D.DefaultColumns-2,1,D.DefaultRows-2),function(e,t,a){for(var n=0;n<a;n++)if(0===n||n===a-1)for(var i=0;i<t;i++)e.grid[n][i].isWall||e.toggleWall(n,i);else e.grid[n][0].isWall||e.toggleWall(n,0),e.grid[n][t-1].isWall||e.toggleWall(n,t-1)}(e,D.DefaultColumns,D.DefaultRows)}function k(e,t){return Math.floor(Math.random()*(t-e+1)+e)}D.DefaultRows=13,D.DefaultColumns=35,D.DEFAULT_START=[6,5],D.DEFAULT_END=[6,29];var A=function(){function e(t,a,n){Object(r.a)(this,e),this.grid=void 0,this.grid=[]}return Object(l.a)(e,[{key:"initializeNode",value:function(e,t,a,n,i){var s=0;return a&&(s=Math.floor(9*Math.random())+1),{col:t,row:e,isEnd:e===i[0]&&t===i[1],isStart:e===n[0]&&t===n[1],isVisited:!1,isWall:!1,distance:1/0,previous:null,weight:s}}},{key:"initializeGrid",value:function(e,t,a){for(var n=[],i=0;i<D.DefaultRows;i++){for(var s=[],o=0;o<D.DefaultColumns;o++)s.push(this.initializeNode(i,o,e,t,a));n.push(s)}return this.grid=n,n}},{key:"toggleStart",value:function(e,t){this.grid[e][t].isStart=!this.grid[e][t].isStart}},{key:"toggleEnd",value:function(e,t){this.grid[e][t].isEnd=!this.grid[e][t].isEnd}},{key:"toggleWall",value:function(e,t){this.grid[e][t].isWall=!this.grid[e][t].isWall}}]),e}(),O=a(17),T=function(){function e(){Object(r.a)(this,e)}return Object(l.a)(e,[{key:"getUnvisitedNeighbors",value:function(e,t){var a=[],n=e.col,i=e.row;return i>0&&a.push(t[i-1][n]),i<t.length-1&&a.push(t[i+1][n]),n>0&&a.push(t[i][n-1]),n<t[0].length-1&&a.push(t[i][n+1]),(a=a.filter((function(e){return!e.isVisited}))).filter((function(e){return!e.isWall}))}},{key:"getShortestPath",value:function(e,t){for(var a=[],n=t;null!==n&&n!==e;)a.unshift(n),n=n.previous;return a.unshift(e),a}},{key:"getAllNodes",value:function(e){for(var t=[],a=0;a<D.DefaultRows;a++)for(var n=0;n<D.DefaultColumns;n++)e[a][n].isVisited||e[a][n].isWall||t.push(e[a][n]);return t}}]),e}();T._time=12.5;var M=function(e){Object(u.a)(a,e);var t=Object(c.a)(a);function a(){return Object(r.a)(this,a),t.apply(this,arguments)}return Object(l.a)(a,[{key:"traverse",value:function(e,t,a){var n=[],i=this.getAllNodes(e);t.previous=null,t.distance=0;for(var s=Array(D.DefaultRows*D.DefaultColumns).fill(!1),o=0;o<D.DefaultRows*D.DefaultColumns-1;o++){var r,l=Object(O.a)(i);try{for(l.s();!(r=l.n()).done;){var d=r.value,u=this.getUnvisitedNeighbors(d,e),c=d.row,h=d.col;!s[c*D.DefaultColumns+h]&&u.length>0&&(n.push(d),s[c*D.DefaultColumns+h]=!s[c*D.DefaultColumns+h]);var v,g=Object(O.a)(u);try{for(g.s();!(v=g.n()).done;){var m=v.value,f=d.distance+m.weight;f<m.distance&&(m.distance=f,m.previous=d)}}catch(p){g.e(p)}finally{g.f()}}}catch(p){l.e(p)}finally{l.f()}}return n}}]),a}(T);M.weighted=!0,M.text="Bellman Ford algorithm works by overestimating the length of the path from the starting vertex to all other vertices. Then it iteratively relaxes those estimates by finding new paths that are shorter than the previously overestimated paths.";var j=function(e){Object(u.a)(a,e);var t=Object(c.a)(a);function a(){return Object(r.a)(this,a),t.apply(this,arguments)}return Object(l.a)(a,[{key:"traverse",value:function(e,t,a){var n=[],i=[];for(t.isVisited=!0,t.previous=null,n.push(t),i.push(t);0!==n.length;){var s=n.shift();if(s===a)return i;var o,r=this.getUnvisitedNeighbors(s,e),l=Object(O.a)(r);try{for(l.s();!(o=l.n()).done;){var d=o.value;d.isVisited=!0,d.previous=s,n.push(d),i.push(d)}}catch(u){l.e(u)}finally{l.f()}}return i}}]),a}(T);j.weighted=!1,j.text="Breadth-first search works on unweighted graphs and\n  guarantees the shortest path. This algorithm works by beginning at the\n  starting node and visiting each of its neighbors. It then moves to\n  each neighbor and visits any of its unvisited neighbors. It repeats this\n  process spreading out across the graph until all nodes that can be visited\n  have been, or until we reach the destination node.";var W=function(e){Object(u.a)(a,e);var t=Object(c.a)(a);function a(){return Object(r.a)(this,a),t.apply(this,arguments)}return Object(l.a)(a,[{key:"traverse",value:function(e,t,a){var n=[],i=[];for(t.isVisited=!0,t.previous=null,n.push(t),i.push(t);0!==n.length;){var s=n.pop();if(s===a)return i;s.isVisited=!0,i.push(s);var o,r=this.getUnvisitedNeighbors(s,e),l=Object(O.a)(r);try{for(l.s();!(o=l.n()).done;){var d=o.value;d.previous=s,n.push(d)}}catch(u){l.e(u)}finally{l.f()}}return i}}]),a}(T);W.weighted=!1,W._time=25,W.text="Depth-first search works on unweighted graphs and does not\n  guarantee the shortest path. This algorithm visits one node at a time. At\n  each node it visits it selects an unvisited neighbor and moves to\n  that node. It repeats this process until it reaches a node with no unvisited\n  neighbors. It then backtracks to a node which has unvisited neighbors and\n  moves forward down that path. It repeats this until all nodes that can\n  be visited have been, or until it reaches the destination node.";var C=function(e){Object(u.a)(a,e);var t=Object(c.a)(a);function a(){return Object(r.a)(this,a),t.apply(this,arguments)}return Object(l.a)(a,[{key:"traverse",value:function(e,t,a){var n=[];t.distance=0,t.weight=0;for(var i=this.getAllNodes(e);0!==i.length;){this.sortNodesByDistance(i);var s=i.shift();if((null===s||void 0===s?void 0:s.distance)===1/0)return n;if(s.isVisited=!0,n.push(s),s===a)return n;var o,r=this.getUnvisitedNeighbors(s,e),l=Object(O.a)(r);try{for(l.s();!(o=l.n()).done;){var d=o.value,u=s.distance+d.weight;u<d.distance&&(d.distance=u,d.previous=s)}}catch(c){l.e(c)}finally{l.f()}}}},{key:"sortNodesByDistance",value:function(e){e.sort((function(e,t){return e.distance-t.distance}))}}]),a}(T);C.weighted=!0,C.text="Dijkstra's Algorithm works on the basis that any subpath B -> D of the shortest path A -> D between vertices A and D is also the shortest path between vertices B and D.Djikstra used this property in the opposite direction i.e we overestimate the distance of each vertex from the starting vertex. Then we visit each node and its neighbors to find the shortest subpath to those neighbors.\nThe algorithm uses a greedy approach in the sense that we find the next best solution hoping that the end result is the best solution for the whole problem.";a(66);var z=function(e){Object(u.a)(a,e);var t=Object(c.a)(a);function a(e){var n;return Object(r.a)(this,a),(n=t.call(this,e)).state={algo:C,algoText:"Dijkstra's",speed:"Fast",grid:new A(C.weighted,D.DEFAULT_START,D.DEFAULT_END),mouseIsPressed:!1,animator:new N,visualized:!1,start:D.DEFAULT_START,end:D.DEFAULT_END,movingStart:!1,movingEnd:!1,windowHeight:null,windowWidth:null},n.visualize=n.visualize.bind(Object(d.a)(n)),n.speedChange=n.speedChange.bind(Object(d.a)(n)),n.algoChange=n.algoChange.bind(Object(d.a)(n)),n.clearBoard=n.clearBoard.bind(Object(d.a)(n)),n.newWeights=n.newWeights.bind(Object(d.a)(n)),n.generateMaze=n.generateMaze.bind(Object(d.a)(n)),n}return Object(l.a)(a,[{key:"componentWillMount",value:function(){var e=this;this.setState({windowHeight:window.innerHeight,windowWidth:window.innerWidth},(function(){var t=e.state,a=t.windowWidth,n=t.grid;a&&a<=1550&&a>=1330?(D.setRoworColumn(30,"columns"),D.setStartOrEnd([6,24],"end")):a&&a<=1330?(D.setRoworColumn(25,"columns"),D.setStartOrEnd([6,19],"end")):D.DefaultColumns=35,null===n||void 0===n||n.initializeGrid(C.weighted,D.DEFAULT_START,D.DEFAULT_END),e.setState({grid:n,start:D.DEFAULT_START,end:D.DEFAULT_END})}))}},{key:"handleMouseDown",value:function(e,t){var a=this.state,n=a.grid,i=a.start,s=a.end;a.visualized||i&&s&&(e===i[0]&&t===i[1]?this.setState({movingStart:!0}):e===s[0]&&t===s[1]?this.setState({movingEnd:!0}):n&&n.toggleWall(e,t),this.setState({grid:n,mouseIsPressed:!0}))}},{key:"handleMouseEnter",value:function(e,t){var a=this.state,n=a.grid,i=a.start,s=a.end,o=a.mouseIsPressed,r=a.movingStart,l=a.movingEnd,d=a.visualized;o&&!d&&i&&s&&(r?(n&&n.toggleStart(e,t),n&&n.toggleStart(i[0],i[1]),this.setState({start:[e,t],movingStart:!0})):l?(n&&n.toggleEnd(e,t),n&&n.toggleEnd(s[0],s[1]),this.setState({end:[e,t],movingEnd:!0})):n&&n.toggleWall(e,t),this.setState({grid:n}))}},{key:"handleMouseUp",value:function(){this.state.visualized||this.setState({mouseIsPressed:!1,movingStart:!1,movingEnd:!1})}},{key:"algoChange",value:function(e){var t=this.state,a=t.grid,n=t.start,i=t.end;if(!t.visualized&&n&&i&&a){var s={newAlgo:null,newAlgoText:null,newGrid:null};switch(this.unvisitNodes(!1,n,i),e){case"Dijkstra":s.newAlgo=C,s.newAlgoText="Dijkstra's",s.newGrid=new A(C.weighted,n,i),s.newGrid.initializeGrid(!0,n,i);break;case"BFS":s.newAlgo=j,s.newAlgoText="Breadth-First Search",s.newGrid=new A(j.weighted,n,i),s.newGrid.initializeGrid(!1,n,i);break;case"DFS":s.newAlgo=W,s.newAlgoText="Depth-First Search",s.newGrid=new A(W.weighted,n,i),s.newGrid.initializeGrid(!1,n,i);break;case"Bellman-Ford":s.newAlgo=M,s.newAlgoText="Bellman-Ford",s.newGrid=new A(M.weighted,n,i),s.newGrid.initializeGrid(!0,n,i);break;default:return}s.newGrid=this.keepWalls(a,s.newGrid),this.setState({algo:s.newAlgo,algoText:s.newAlgoText,grid:s.newGrid})}}},{key:"speedChange",value:function(e){var t,a={visitedSpeed:null,shortestSpeed:null};switch(e){case"Slow":a.visitedSpeed=75,a.shortestSpeed=375;break;case"Average":a.visitedSpeed=25,a.shortestSpeed=125;break;case"Fast":a.visitedSpeed=10,a.shortestSpeed=50;break;default:return}null===(t=this.state.animator)||void 0===t||t.updateSpeed(a.visitedSpeed,a.shortestSpeed)}},{key:"visualize",value:function(){var e=this,t=this.state,a=t.grid,n=t.algo,i=t.visualized,s=t.start,o=t.end,r=t.animator;if(!i&&a&&s&&o&&n&&r){this.unvisitNodes(!1,s,o),this.setState({visualized:!0});var l=new n,d=a.grid[s[0]][s[1]],u=a.grid[o[0]][o[1]];d.isWall&&(d.isWall=!d.isWall),u.isWall&&(u.isWall=!u.isWall);var c=l.traverse(a.grid,d,u),h=l.getShortestPath(d,u);if(c){null===r||void 0===r||r.animate(c,h);var v=c.length*r.visitedSpeed+h.length*r.shortestSpeed;setTimeout((function(){return e.setState({visualized:!1})}),v)}}}},{key:"unvisitNodes",value:function(e,t,a){for(var n=this.state.grid,i=0;i<D.DefaultRows;i++)for(var s=0;s<D.DefaultColumns;s++){var o=null===n||void 0===n?void 0:n.grid[i][s];if(o){var r=document.getElementById("node-".concat(o.row,"-").concat(o.col));if(r&&(r.className="node "),o.isVisited=!1,o.previous=null,o.distance=1/0,e)o.isWall=!1;else if(o.isWall){var l=document.getElementById("node-".concat(o.row,"-").concat(o.col));l&&(l.className="node node-wall")}if(i===t[0]&&s===t[1]){var d=document.getElementById("node-".concat(t[0],"-").concat(t[1]));d&&(d.className="node node-start"),o.isStart=!0}if(i===a[0]&&s===a[1]){var u=document.getElementById("node-".concat(a[0],"-").concat(a[1]));u&&(u.className="node node-end"),o.isEnd=!0}}}this.setState({grid:n,visualized:!1})}},{key:"clearBoard",value:function(){this.state.visualized||(this.unvisitNodes(!0,D.DEFAULT_START,D.DEFAULT_END),this.setState({start:D.DEFAULT_START,end:D.DEFAULT_END}))}},{key:"newWeights",value:function(){var e=this.state,t=e.grid,a=e.algo,n=e.start,i=e.end;if(!e.visualized&&n&&a&&t&&i){this.unvisitNodes(!1,n,i);var s=new A(a.weighted,n,i);s.initializeGrid(a.weighted,n,i);for(var o=0;o<D.DefaultRows;o++)for(var r=0;r<D.DefaultColumns;r++)t.grid[o][r].isWall&&(s.grid[o][r].isWall=!0);this.setState({grid:s})}}},{key:"keepWalls",value:function(e,t){for(var a=0;a<D.DefaultRows;a++)for(var n=0;n<D.DefaultColumns;n++)e.grid[a][n].isWall&&(t.grid[a][n].isWall=!0);return t}},{key:"generateMaze",value:function(e){var t=this.state,a=t.grid,n=t.start,i=t.end;if(a&&n&&i){switch(this.unvisitNodes(!0,n,i),e){case"Random":!function(e){for(var t=0;t<D.DefaultRows;t++)for(var a=0;a<D.DefaultColumns;a++){var n=Math.random();!(n<=.1||n>=.85)||e.grid[t][a].isStart||e.grid[t][a].isEnd||e.toggleWall(t,a)}}(a);break;case"RecursiveDivision":y(a);break;default:return}this.setState({grid:a}),this.unvisitNodes(!1,n,i)}}},{key:"render",value:function(){var e=this,t=this.state,a=t.grid,n=t.mouseIsPressed,s=t.visualized,o=t.algo;return i.a.createElement("div",{className:"holder"},i.a.createElement("div",{className:"header"},i.a.createElement(E,{visualize:this.visualize,changeAlgo:this.algoChange,changeSpeed:this.speedChange,clearBoard:this.clearBoard,changeWeights:this.newWeights,visualized:s,generateMaze:this.generateMaze})),i.a.createElement("div",{className:"body"},i.a.createElement("div",{className:"information"},i.a.createElement("h3",null,this.state.algoText," Algorithm"),i.a.createElement("p",null,null===o||void 0===o?void 0:o.text)),i.a.createElement("div",{className:"board"},null===a||void 0===a?void 0:a.grid.map((function(t,a){return i.a.createElement("div",{key:a},t.map((function(t,a){var s=t.row,o=t.col,r=t.isEnd,l=t.isStart,d=t.isWall,u=t.weight;return i.a.createElement(S,{key:a,col:o,row:s,isEnd:r,isStart:l,isWall:d,mouseIsPressed:n,onMouseDown:function(t,a){return e.handleMouseDown(t,a)},onMouseEnter:function(t,a){return e.handleMouseEnter(t,a)},onMouseUp:function(){return e.handleMouseUp()},weight:u})})))})))))}}]),a}(n.Component);var _=function(){return i.a.createElement("div",{className:"App"},i.a.createElement(z,null))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));o.a.render(i.a.createElement(i.a.StrictMode,null,i.a.createElement(_,null)),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()})).catch((function(e){console.error(e.message)}))}},[[47,1,2]]]);
//# sourceMappingURL=main.1e3daa0a.chunk.js.map