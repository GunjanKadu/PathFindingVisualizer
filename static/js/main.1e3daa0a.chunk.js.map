{"version":3,"sources":["Components/HelpModal/helpModal.tsx","Components/TopBar/topbar.tsx","Components/Node/node.tsx","Utility/Animator.ts","Utility/constants.ts","Utility/RandomWalls/Mazes.ts","Utility/grid.ts","Utility/Algorithms/Finder.ts","Utility/Algorithms/BellmanFord.ts","Utility/Algorithms/BFS.ts","Utility/Algorithms/DFS.ts","Utility/Algorithms/Dijkstra.ts","Components/Board/board.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Example","props","Modal","show","showModal","onHide","toggleShowModal","backdrop","keyboard","className","centered","Header","closeButton","Title","Body","style","height","width","border","backgroundColor","display","onSpeedChangeHandler","e","target","value","changeSpeed","setState","speedValue","onAlgoChangeHandler","changeAlgo","algoValue","onMazeChangeHandler","generateMaze","mazeValue","showHelpModal","state","this","Navbar","expand","bg","variant","Brand","href","fontWeight","marginRight","disabled","visualized","onChange","Button","onClick","visualize","changeWeights","clearBoard","Nav","Link","color","alignItems","gap","Component","Node","nodeType","node","isEnd","isStart","isWall","col","row","onMouseDown","onMouseEnter","onMouseUp","weight","onMouseLeave","Alert","fontSize","toString","id","Animator","visitedSpeed","shortestSpeed","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","el","document","getElementById","DefaultValues","type","DefaultRows","DefaultColumns","DEFAULT_START","DEFAULT_END","recursiveDivision","grid","addInnerWalls","h","minX","maxX","minY","maxY","y","Math","floor","randomNumber","hole","hole2","toggleWall","addHWall","x","addVWall","j","addOuterWalls","min","max","random","Grid","weighted","start","end","isVisited","distance","Infinity","previous","newRow","push","initializeNode","Finder","neighbors","filter","neighbor","startNode","endNode","shortestPath","currentNode","unshift","nodes","_time","BellmanFord","getAllNodes","visited","Array","fill","getUnvisitedNeighbors","newDistance","text","BFS","unvisited","shift","DFS","pop","Dijkstra","sortNodesByDistance","closestNode","unvisitedNodes","sort","nodeA","nodeB","Pathfinder","Visualizer","algo","algoText","speed","mouseIsPressed","animator","movingStart","movingEnd","windowHeight","windowWidth","bind","speedChange","algoChange","newWeights","window","innerHeight","innerWidth","setRoworColumn","setStartOrEnd","initializeGrid","toggleStart","toggleEnd","newAlgo","newAlgoText","newGrid","unvisitNodes","keepWalls","speeds","updateSpeed","traverser","traverse","getShortestPath","animate","buttonLockTime","removeWalls","newLocal","newLocal_1","newLocal_2","newLocal_3","decider","randomWalls","map","rowIndex","key","nodeIndex","handleMouseDown","handleMouseEnter","handleMouseUp","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1e3daa0a.chunk.js","sourcesContent":["/**\r\n *\r\n * @Project :  ${PathFinding Visualizer(Path Finding Visualizer)}\r\n * @CreatedBy ${Gunjan Kadu}\r\n * @Email  ${agunjan.kadu@gmail.com}\r\n * @Github https://github.com/GunjanKadu/\r\n * @date   2020-09-10 23:47:40\r\n *\r\n */\r\nimport React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { IHelpModalProps } from \"../../Utility/interfaces\";\r\n\r\nimport \"./helpModal.css\";\r\nexport default function Example(props: IHelpModalProps) {\r\n  return (\r\n    <>\r\n      <Modal\r\n        show={props.showModal}\r\n        onHide={() => props.toggleShowModal()}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n        className=\"modal\"\r\n        centered\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title className=\"modal__title\">HOW TO USE ?</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"modal__content\">\r\n            <div className=\"modal__body\">\r\n              <div className=\"row row__1\">\r\n                <div className=\"start flex\">\r\n                  <div className=\"start__color\"></div>\r\n                  <p>START</p>\r\n                </div>\r\n                <div className=\"end flex\">\r\n                  <div className=\"end__color\"></div>\r\n                  <p>END</p>\r\n                </div>\r\n              </div>\r\n              <div className=\" row row__2\">\r\n                <div className=\"wall flex\">\r\n                  <div className=\"wall__color\"></div>\r\n                  <p>WAll</p>\r\n                </div>\r\n                <div className=\"visited flex\">\r\n                  <div className=\"visited__color\"></div>\r\n                  <p>VISITED</p>\r\n                </div>\r\n              </div>\r\n              <div className=\"row row__3\">\r\n                <div className=\"shortest flex\">\r\n                  <div className=\"shortest__color\"></div>\r\n                  <p>SHORTEST</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"info\">\r\n              <div className=\"info__info\">\r\n                1. YOU CAN MAKE WALL BY CLICKING AND BLOCK\r\n              </div>\r\n              <div className=\"info__info\">\r\n                2. YOU CAN MOVE{\" \"}\r\n                <div\r\n                  style={{\r\n                    height: \"20px\",\r\n                    width: \"20px\",\r\n                    border: \"2px solid black\",\r\n                    backgroundColor: \"black\",\r\n                    display: \"inline-block\",\r\n                  }}\r\n                ></div>{\" \"}\r\n                BY DRAGGING{\" \"}\r\n              </div>\r\n              <div className=\"info__info\">\r\n                3. YOU CAN CHOOSE ALGORITHM AND SPEED FROM SELECT BOX\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n","/**\r\n *\r\n * @Project :  ${PathFinding Visualizer(Path Finding Visualizer)}\r\n * @CreatedBy ${Gunjan Kadu}\r\n * @Email  ${agunjan.kadu@gmail.com}\r\n * @Github https://github.com/GunjanKadu/\r\n * @date   2020-09-10 23:47:40\r\n *\r\n */\r\nimport React, { Component } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport HelpModal from \"../HelpModal/helpModal\";\r\nimport { IHeaderProps, IHeaderState } from \"../../Utility/interfaces\";\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\nimport \"./topbar.css\";\r\n\r\nexport default class Header extends Component<IHeaderProps, IHeaderState> {\r\n  constructor(props: IHeaderProps) {\r\n    super(props);\r\n    this.state = {\r\n      speedValue: \"Fast\",\r\n      algoValue: \"Dijkstra\",\r\n      mazeValue: \"No Maze\",\r\n      showHelpModal: false,\r\n    };\r\n  }\r\n  onSpeedChangeHandler = (e: any) => {\r\n    if (e.target && e.target.value) {\r\n      this.props.changeSpeed(e.target.value);\r\n      this.setState({ speedValue: e.target.value });\r\n    }\r\n  };\r\n  onAlgoChangeHandler = (e: any) => {\r\n    if (e.target && e.target.value) {\r\n      this.props.changeAlgo(e.target.value);\r\n      this.setState({ algoValue: e.target.value });\r\n    }\r\n  };\r\n  onMazeChangeHandler = (e: any) => {\r\n    if (e.target && e.target.value) {\r\n      this.props.generateMaze(e.target.value);\r\n      this.setState({ mazeValue: e.target.value });\r\n    }\r\n  };\r\n  toggleShowModal = () => {\r\n    this.setState({ showHelpModal: !this.state.showHelpModal });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"nav\">\r\n        <div className=\"helpModal\">\r\n          <HelpModal\r\n            showModal={this.state.showHelpModal}\r\n            toggleShowModal={this.toggleShowModal}\r\n          />\r\n        </div>\r\n        <Navbar\r\n          expand=\"lg\"\r\n          bg=\"light\"\r\n          variant=\"light\"\r\n          className=\"flex-column border nav__navContainer\"\r\n        >\r\n          <Navbar.Brand\r\n            href=\".\"\r\n            style={{\r\n              fontWeight: \"bold\",\r\n              marginRight: \"0px\",\r\n            }}\r\n          >\r\n            PATHFINDING VISUALIZER\r\n          </Navbar.Brand>{\" \"}\r\n          <div className=\"selectorMenu\">\r\n            <select\r\n              disabled={this.props.visualized}\r\n              onChange={this.onSpeedChangeHandler}\r\n              value={this.state.speedValue}\r\n            >\r\n              <option value=\"Slow\">Slow</option>\r\n              <option value=\"Average\">Average</option>\r\n              <option value=\"Fast\">Fast</option>\r\n            </select>\r\n            <select\r\n              disabled={this.props.visualized}\r\n              onChange={this.onAlgoChangeHandler}\r\n              value={this.state.algoValue}\r\n            >\r\n              <option value=\"Dijkstra\">Dijkstra</option>\r\n              <option value=\"Bellman-Ford\">Bellman-Ford</option>\r\n              <option value=\"BFS\">BFS</option>\r\n              <option value=\"DFS\">DFS</option>\r\n            </select>\r\n\r\n            <select\r\n              disabled={this.props.visualized}\r\n              onChange={this.onMazeChangeHandler}\r\n              value={this.state.mazeValue}\r\n            >\r\n              <option value=\"None\">No Maze</option>\r\n              <option value=\"Random\">Random</option>\r\n              <option value=\"RecursiveDivision\">RecursiveDivision</option>\r\n            </select>\r\n\r\n            <Button\r\n              className=\"visualize-it-button\"\r\n              onClick={this.props.visualize}\r\n              disabled={this.props.visualized}\r\n            >\r\n              Visualize\r\n            </Button>\r\n            <Button\r\n              className=\"non-visualize-button\"\r\n              onClick={this.props.changeWeights}\r\n              disabled={this.props.visualized}\r\n            >\r\n              New Weights\r\n            </Button>\r\n            <Button\r\n              className=\"non-visualize-button\"\r\n              onClick={this.props.clearBoard}\r\n              disabled={this.props.visualized}\r\n            >\r\n              New Board\r\n            </Button>\r\n          </div>\r\n          <div className=\"nav__footer\">\r\n            <Button\r\n              className=\"how-to-use-button\"\r\n              disabled={this.props.visualized}\r\n              onClick={() =>\r\n                this.setState({ showHelpModal: !this.state.showHelpModal })\r\n              }\r\n            >\r\n              How To Use?\r\n            </Button>\r\n            <Nav.Link href=\"https://github.com/GunjanKadu\">\r\n              <span\r\n                style={{\r\n                  color: \"black\",\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  gap: \"5px\",\r\n                }}\r\n              >\r\n                <span style={{ marginRight: \"7px\" }}>Made by Gunjan Kadu</span>\r\n                <span>\r\n                  <GitHubIcon />\r\n                </span>\r\n              </span>\r\n            </Nav.Link>\r\n          </div>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/**\r\n *\r\n * @Project :  ${PathFinding Visualizer(Path Finding Visualizer)}\r\n * @CreatedBy ${Gunjan Kadu}\r\n * @Email  ${agunjan.kadu@gmail.com}\r\n * @Github https://github.com/GunjanKadu/\r\n * @date   2020-09-10 23:47:40\r\n *\r\n */\r\nimport React, { Component } from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nimport { INodeProps } from \"../../Utility/interfaces\";\r\n\r\nimport \"./node.css\";\r\n\r\nexport default class Node extends Component<INodeProps, any> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      show: false,\r\n    };\r\n  }\r\n  nodeType = (node: INodeProps): string => {\r\n    const type = node.isEnd\r\n      ? \"node-end\"\r\n      : node.isStart\r\n      ? \"node-start\"\r\n      : node.isWall\r\n      ? \"node-wall\"\r\n      : \" \";\r\n    return type;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      col,\r\n      row,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      weight,\r\n      isWall,\r\n      isStart,\r\n      isEnd,\r\n    } = this.props;\r\n    return (\r\n      <div\r\n        className=\"node-box\"\r\n        onMouseEnter={() => {\r\n          this.setState({ show: true });\r\n        }}\r\n        onMouseLeave={() => {\r\n          this.setState({ show: false });\r\n        }}\r\n      >\r\n        {this.state.show && (\r\n          <Alert variant=\"warning\" className=\"alert\">\r\n            <p style={{ fontWeight: \"bold\", fontSize: \"11px\" }}>\r\n              Current Node Info\r\n            </p>\r\n            <p className=\"infoNode\">Row: {row}</p>\r\n            <p className=\"infoNode\">Column: {col}</p>\r\n            <p className=\"infoNode\">Weight: {weight}</p>\r\n            <p className=\"infoNode\">IsStart: {isStart.toString()}</p>\r\n            <p className=\"infoNode\">IsEnd: {isEnd.toString()}</p>\r\n            <p className=\"infoNode\">Is Wall: {isWall.toString()}</p>\r\n          </Alert>\r\n        )}\r\n        <div\r\n          id={`node-${row}-${col}`}\r\n          className={`node ${this.nodeType(this.props)}`}\r\n          onMouseDown={() => onMouseDown(row, col)}\r\n          onMouseEnter={() => onMouseEnter(row, col)}\r\n          onMouseUp={() => onMouseUp()}\r\n        >\r\n          <p>{weight}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/**\r\n *\r\n * @Project :  ${PathFinding Visualizer(Path Finding Visualizer)}\r\n * @CreatedBy ${Gunjan Kadu}\r\n * @Email  ${agunjan.kadu@gmail.com}\r\n * @Github https://github.com/GunjanKadu/\r\n * @date   2020-09-10 23:47:40\r\n *\r\n */\r\nimport { IAnimator, INodeProperties } from \"./interfaces\";\r\n\r\nexport default class Animator implements IAnimator {\r\n  visitedSpeed: number;\r\n  shortestSpeed: number;\r\n  constructor() {\r\n    this.visitedSpeed = 10;\r\n    this.shortestSpeed = 50;\r\n  }\r\n  animate(\r\n    visitedNodesInOrder: Array<INodeProperties>,\r\n    nodesInShortestPathOrder: Array<INodeProperties>\r\n  ) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, this.visitedSpeed * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        let el = document.getElementById(`node-${node.row}-${node.col}`);\r\n        if (el) el.className = \"node node-visited\";\r\n      }, this.visitedSpeed * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder: Array<INodeProperties>) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        let el = document.getElementById(`node-${node.row}-${node.col}`);\r\n        if (el) el.className = \"node node-shortest-path\";\r\n      }, this.shortestSpeed * i);\r\n    }\r\n  }\r\n\r\n  updateSpeed(visitedSpeed: number, shortestSpeed: number) {\r\n    this.visitedSpeed = visitedSpeed;\r\n    this.shortestSpeed = shortestSpeed;\r\n  }\r\n}\r\n","/**\r\n *\r\n * @Project :  ${PathFinding Visualizer(Path Finding Visualizer)}\r\n * @CreatedBy ${Gunjan Kadu}\r\n * @Email  ${agunjan.kadu@gmail.com}\r\n * @Github https://github.com/GunjanKadu/\r\n * @date   2020-09-10 23:47:40\r\n *\r\n */\r\nexport const ALGORITHM = {\r\n  DIJKSTRA: \"Dijkstra\",\r\n  BFS: \"Bfs\",\r\n  DFS: \"Dfs\",\r\n};\r\nexport const uuidv4 = (): string => {\r\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\r\n    var r = (Math.random() * 16) | 0,\r\n      v = c === \"x\" ? r : (r & 0x3) | 0x8;\r\n    return v.toString(16);\r\n  });\r\n};\r\nexport class DefaultValues {\r\n  static DefaultRows: number = 13;\r\n  static DefaultColumns: number = 35;\r\n  static DEFAULT_START = [6, 5];\r\n  static DEFAULT_END = [6, 29];\r\n\r\n  static setRoworColumn(value: number, type: string) {\r\n    if (type === \"rows\") DefaultValues.DefaultRows = value;\r\n    if (type === \"columns\") DefaultValues.DefaultColumns = value;\r\n  }\r\n\r\n  static setStartOrEnd(value: Array<number>, type: string) {\r\n    if (type === \"start\") DefaultValues.DEFAULT_START = value;\r\n    if (type === \"end\") DefaultValues.DEFAULT_END = value;\r\n  }\r\n}\r\n","/**\r\n *\r\n * @Project :  ${PathFinding Visualizer(Path Finding Visualizer)}\r\n * @CreatedBy ${Gunjan Kadu}\r\n * @Email  ${agunjan.kadu@gmail.com}\r\n * @Github https://github.com/GunjanKadu/\r\n * @date   2020-09-10 23:47:40\r\n *\r\n */\r\nimport { DefaultValues } from \"../constants\";\r\nimport { IGrid } from \"../interfaces\";\r\n\r\nexport function randomWalls(grid: IGrid) {\r\n  for (let row = 0; row < DefaultValues.DefaultRows; row++) {\r\n    for (let col = 0; col < DefaultValues.DefaultColumns; col++) {\r\n      let decider = Math.random();\r\n      if (\r\n        (decider <= 0.1 || decider >= 0.85) &&\r\n        !grid.grid[row][col].isStart &&\r\n        !grid.grid[row][col].isEnd\r\n      ) {\r\n        grid.toggleWall(row, col);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function recursiveDivision(grid: IGrid) {\r\n  addInnerWalls(\r\n    grid,\r\n    true,\r\n    1,\r\n    DefaultValues.DefaultColumns - 2,\r\n    1,\r\n    DefaultValues.DefaultRows - 2\r\n  );\r\n  addOuterWalls(grid, DefaultValues.DefaultColumns, DefaultValues.DefaultRows);\r\n}\r\n\r\nfunction addOuterWalls(grid: IGrid, width: number, height: number) {\r\n  for (var i = 0; i < height; i++) {\r\n    if (i === 0 || i === height - 1) {\r\n      for (var j = 0; j < width; j++) {\r\n        if (!grid.grid[i][j].isWall) grid.toggleWall(i, j);\r\n      }\r\n    } else {\r\n      if (!grid.grid[i][0].isWall) grid.toggleWall(i, 0);\r\n      if (!grid.grid[i][width - 1].isWall) grid.toggleWall(i, width - 1);\r\n    }\r\n  }\r\n}\r\n\r\nfunction addInnerWalls(\r\n  grid: IGrid,\r\n  h: boolean,\r\n  minX: number,\r\n  maxX: number,\r\n  minY: number,\r\n  maxY: number\r\n) {\r\n  if (h) {\r\n    if (maxX - minX < 2) {\r\n      return;\r\n    }\r\n\r\n    var y = Math.floor(randomNumber(minY, maxY) / 2) * 2;\r\n    addHWall(grid, minX, maxX, y);\r\n\r\n    addInnerWalls(grid, !h, minX, maxX, minY, y - 1);\r\n    addInnerWalls(grid, !h, minX, maxX, y + 1, maxY);\r\n  } else {\r\n    if (maxY - minY < 2) {\r\n      return;\r\n    }\r\n\r\n    var x = Math.floor(randomNumber(minX, maxX) / 2) * 2;\r\n    addVWall(grid, minY, maxY, x);\r\n\r\n    addInnerWalls(grid, !h, minX, x - 1, minY, maxY);\r\n    addInnerWalls(grid, !h, x + 1, maxX, minY, maxY);\r\n  }\r\n}\r\n\r\nfunction addHWall(grid: IGrid, minX: number, maxX: number, y: number) {\r\n  var hole = Math.floor(randomNumber(minX, maxX) / 2) * 2 + 1;\r\n  var hole2 = Math.floor(randomNumber(minX, maxX) / 2) * 2 + 1;\r\n  for (var i = minX; i <= maxX; i++) {\r\n    if (i === hole || i === hole2) continue;\r\n    grid.toggleWall(y, i);\r\n  }\r\n}\r\n\r\nfunction addVWall(grid: IGrid, minY: number, maxY: number, x: number) {\r\n  var hole = Math.floor(randomNumber(minY, maxY) / 2) * 2 + 1;\r\n  var hole2 = Math.floor(randomNumber(minY, maxY) / 2) * 2 + 1;\r\n  for (var i = minY; i <= maxY; i++) {\r\n    if (i === hole || i === hole2) continue;\r\n    grid.toggleWall(i, x);\r\n  }\r\n}\r\n\r\nfunction randomNumber(min: number, max: number) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","/**\r\n *\r\n * @Project :  ${PathFinding Visualizer(Path Finding Visualizer)}\r\n * @CreatedBy ${Gunjan Kadu}\r\n * @Email  ${agunjan.kadu@gmail.com}\r\n * @Github https://github.com/GunjanKadu/\r\n * @date   2020-09-10 23:47:40\r\n *\r\n */\r\nimport { DefaultValues } from \"./constants\";\r\nimport { IGrid, INodeProperties } from \"./interfaces\";\r\n\r\nexport default class Grid implements IGrid {\r\n  grid: Array<Array<INodeProperties>>;\r\n  constructor(weighted: boolean, start: Array<number>, end: Array<number>) {\r\n    this.grid = [];\r\n  }\r\n\r\n  initializeNode(\r\n    row: number,\r\n    col: number,\r\n    weighted: boolean,\r\n    start: Array<number>,\r\n    end: Array<number>\r\n  ): INodeProperties {\r\n    let weight = 0;\r\n    if (weighted) {\r\n      weight = Math.floor(Math.random() * 9) + 1;\r\n    }\r\n    return {\r\n      col,\r\n      row,\r\n      isEnd: row === end[0] && col === end[1],\r\n      isStart: row === start[0] && col === start[1],\r\n      isVisited: false,\r\n      isWall: false,\r\n      distance: Infinity,\r\n      previous: null,\r\n      weight: weight,\r\n    };\r\n  }\r\n\r\n  initializeGrid(\r\n    weighted: boolean,\r\n    start: Array<number>,\r\n    end: Array<number>\r\n  ): Array<Array<INodeProperties>> {\r\n    const grid: Array<Array<INodeProperties>> = [];\r\n    for (let row = 0; row < DefaultValues.DefaultRows; row++) {\r\n      const newRow = [];\r\n      for (let col = 0; col < DefaultValues.DefaultColumns; col++) {\r\n        newRow.push(this.initializeNode(row, col, weighted, start, end));\r\n      }\r\n      grid.push(newRow);\r\n    }\r\n    this.grid = grid;\r\n    return grid;\r\n  }\r\n\r\n  toggleStart(row: number, col: number): void {\r\n    this.grid[row][col].isStart = !this.grid[row][col].isStart;\r\n  }\r\n  toggleEnd(row: number, col: number): void {\r\n    this.grid[row][col].isEnd = !this.grid[row][col].isEnd;\r\n  }\r\n  toggleWall(row: number, col: number): void {\r\n    this.grid[row][col].isWall = !this.grid[row][col].isWall;\r\n  }\r\n}\r\n","/**\r\n *\r\n * @Project :  ${PathFinding Visualizer(Path Finding Visualizer)}\r\n * @CreatedBy ${Gunjan Kadu}\r\n * @Email  ${agunjan.kadu@gmail.com}\r\n * @Github https://github.com/GunjanKadu/\r\n * @date   2020-09-10 23:47:40\r\n *\r\n */\r\nimport { DefaultValues } from \"../constants\";\r\nimport { IFinder, INodeProperties } from \"../interfaces\";\r\n\r\nexport default class Finder implements IFinder {\r\n  static _time = 12.5;\r\n  getUnvisitedNeighbors(\r\n    node: INodeProperties,\r\n    grid: Array<Array<INodeProperties>>\r\n  ): Array<INodeProperties> {\r\n    let neighbors = [];\r\n    const { col, row } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    neighbors = neighbors.filter((neighbor) => !neighbor.isVisited);\r\n    return neighbors.filter((neighbor) => !neighbor.isWall);\r\n  }\r\n\r\n  getShortestPath(\r\n    startNode: INodeProperties,\r\n    endNode: INodeProperties\r\n  ): Array<INodeProperties> {\r\n    const shortestPath = [];\r\n    let currentNode = endNode;\r\n    while (currentNode !== null && currentNode !== startNode) {\r\n      shortestPath.unshift(currentNode);\r\n      currentNode = currentNode.previous;\r\n    }\r\n    shortestPath.unshift(startNode);\r\n    return shortestPath;\r\n  }\r\n\r\n  getAllNodes(grid: Array<Array<INodeProperties>>): Array<INodeProperties> {\r\n    const nodes = [];\r\n    for (let i = 0; i < DefaultValues.DefaultRows; i++) {\r\n      for (let j = 0; j < DefaultValues.DefaultColumns; j++) {\r\n        if (grid[i][j].isVisited || grid[i][j].isWall) continue;\r\n        nodes.push(grid[i][j]);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n}\r\n","/**\n *\n * @Project :  ${PathFinding Visualizer(Path Finding Visualizer)}\n * @CreatedBy ${Gunjan Kadu}\n * @Email  ${agunjan.kadu@gmail.com}\n * @Github https://github.com/GunjanKadu/\n * @date   2020-09-10 23:47:40\n *\n */\nimport { DefaultValues } from \"../constants\";\nimport { IBellMan, INodeProperties } from \"../interfaces\";\nimport Finder from \"./Finder\";\n\nexport default class BellmanFord extends Finder implements IBellMan {\n  static weighted = true;\n  static text = `Bellman Ford algorithm works by overestimating the length of the path from the starting vertex to all other vertices. Then it iteratively relaxes those estimates by finding new paths that are shorter than the previously overestimated paths.`;\n  traverse(\n    grid: Array<Array<INodeProperties>>,\n    startNode: INodeProperties,\n    endNode: INodeProperties\n  ): Array<INodeProperties> | undefined {\n    const visitedNodesInOrder = [];\n    const nodes = this.getAllNodes(grid);\n    startNode.previous = null;\n    startNode.distance = 0;\n    //visitedNodesInOrder.push(startNode);\n    let visited = Array(\n      DefaultValues.DefaultRows * DefaultValues.DefaultColumns\n    ).fill(false);\n    for (\n      let i = 0;\n      i < DefaultValues.DefaultRows * DefaultValues.DefaultColumns - 1;\n      i++\n    ) {\n      for (const node of nodes) {\n        const neighbors = this.getUnvisitedNeighbors(node, grid);\n        const { row, col } = node;\n        if (\n          !visited[row * DefaultValues.DefaultColumns + col] &&\n          neighbors.length > 0\n        ) {\n          visitedNodesInOrder.push(node);\n          visited[row * DefaultValues.DefaultColumns + col] = !visited[\n            row * DefaultValues.DefaultColumns + col\n          ];\n        }\n        for (const neighbor of neighbors) {\n          let newDistance = node.distance + neighbor.weight;\n          if (newDistance < neighbor.distance) {\n            //if (!visitedNodesInOrder.includes(neighbor))\n            // visitedNodesInOrder.push(neighbor);\n            neighbor.distance = newDistance;\n            neighbor.previous = node;\n          }\n        }\n      }\n    }\n    return visitedNodesInOrder;\n  }\n}\nexport type TBellmanFord = typeof BellmanFord;\n","/**\r\n *\r\n * @Project :  ${PathFinding Visualizer(Path Finding Visualizer)}\r\n * @CreatedBy ${Gunjan Kadu}\r\n * @Email  ${agunjan.kadu@gmail.com}\r\n * @Github https://github.com/GunjanKadu/\r\n * @date   2020-09-10 23:47:40\r\n *\r\n */\r\nimport { IBFS, INodeProperties } from \"../interfaces\";\r\nimport Finder from \"./Finder\";\r\n\r\nexport default class BFS extends Finder implements IBFS {\r\n  static weighted = false;\r\n  static text = `Breadth-first search works on unweighted graphs and\r\n  guarantees the shortest path. This algorithm works by beginning at the\r\n  starting node and visiting each of its neighbors. It then moves to\r\n  each neighbor and visits any of its unvisited neighbors. It repeats this\r\n  process spreading out across the graph until all nodes that can be visited\r\n  have been, or until we reach the destination node.`;\r\n\r\n  traverse(\r\n    grid: Array<Array<INodeProperties>>,\r\n    startNode: INodeProperties,\r\n    endNode: INodeProperties\r\n  ): Array<INodeProperties> | undefined {\r\n    const unvisited: Array<INodeProperties> = [];\r\n    const visitedNodesInOrder = [];\r\n    startNode.isVisited = true;\r\n    startNode.previous = null;\r\n    unvisited.push(startNode);\r\n    visitedNodesInOrder.push(startNode);\r\n    while (unvisited.length !== 0) {\r\n      let currentNode: any = unvisited.shift();\r\n      if (currentNode === endNode) {\r\n        return visitedNodesInOrder;\r\n      }\r\n      let neighbors = this.getUnvisitedNeighbors(currentNode, grid);\r\n      for (const neighbor of neighbors) {\r\n        neighbor.isVisited = true;\r\n        neighbor.previous = currentNode;\r\n        unvisited.push(neighbor);\r\n        visitedNodesInOrder.push(neighbor);\r\n      }\r\n    }\r\n    return visitedNodesInOrder;\r\n  }\r\n}\r\nexport type TBFS = typeof BFS;\r\n","/**\r\n *\r\n * @Project :  ${PathFinding Visualizer(Path Finding Visualizer)}\r\n * @CreatedBy ${Gunjan Kadu}\r\n * @Email  ${agunjan.kadu@gmail.com}\r\n * @Github https://github.com/GunjanKadu/\r\n * @date   2020-09-10 23:47:40\r\n *\r\n */\r\nimport { IDFS, INodeProperties } from \"../interfaces\";\r\nimport Finder from \"./Finder\";\r\nexport default class DFS extends Finder implements IDFS {\r\n  static weighted = false;\r\n  static _time = 25;\r\n  static text = `Depth-first search works on unweighted graphs and does not\r\n  guarantee the shortest path. This algorithm visits one node at a time. At\r\n  each node it visits it selects an unvisited neighbor and moves to\r\n  that node. It repeats this process until it reaches a node with no unvisited\r\n  neighbors. It then backtracks to a node which has unvisited neighbors and\r\n  moves forward down that path. It repeats this until all nodes that can\r\n  be visited have been, or until it reaches the destination node.`;\r\n  traverse(\r\n    grid: Array<Array<INodeProperties>>,\r\n    startNode: INodeProperties,\r\n    endNode: INodeProperties\r\n  ): Array<INodeProperties> | undefined {\r\n    const unvisited = [];\r\n    const visitedNodesInOrder = [];\r\n    startNode.isVisited = true;\r\n    startNode.previous = null;\r\n    unvisited.push(startNode);\r\n    visitedNodesInOrder.push(startNode);\r\n    while (unvisited.length !== 0) {\r\n      //console.log(unvisited);\r\n      let currentNode: any = unvisited.pop();\r\n      if (currentNode === endNode) return visitedNodesInOrder;\r\n      currentNode.isVisited = true;\r\n      visitedNodesInOrder.push(currentNode);\r\n      let neighbors = this.getUnvisitedNeighbors(currentNode, grid);\r\n\r\n      for (const neighbor of neighbors) {\r\n        neighbor.previous = currentNode;\r\n        unvisited.push(neighbor);\r\n      }\r\n    }\r\n    return visitedNodesInOrder;\r\n  }\r\n}\r\nexport type TDFS = typeof DFS;\r\n","/**\r\n *\r\n * @Project :  ${PathFinding Visualizer(Path Finding Visualizer)}\r\n * @CreatedBy ${Gunjan Kadu}\r\n * @Email  ${agunjan.kadu@gmail.com}\r\n * @Github https://github.com/GunjanKadu/\r\n * @date   2020-09-10 23:47:40\r\n *\r\n */\r\nimport { IDijkstra, INodeProperties } from \"../interfaces\";\r\n\r\nimport Pathfinder from \"./Finder\";\r\n\r\nexport default class Dijkstra extends Pathfinder implements IDijkstra {\r\n  static weighted = true;\r\n  static text = `Dijkstra's Algorithm works on the basis that any subpath B -> D of the shortest path A -> D between vertices A and D is also the shortest path between vertices B and D.Djikstra used this property in the opposite direction i.e we overestimate the distance of each vertex from the starting vertex. Then we visit each node and its neighbors to find the shortest subpath to those neighbors.\r\nThe algorithm uses a greedy approach in the sense that we find the next best solution hoping that the end result is the best solution for the whole problem.`;\r\n\r\n  traverse(\r\n    grid: Array<Array<INodeProperties>>,\r\n    startNode: INodeProperties,\r\n    endNode: INodeProperties\r\n  ): Array<INodeProperties> | undefined {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    startNode.weight = 0;\r\n    const unvisited: Array<INodeProperties> = this.getAllNodes(grid);\r\n\r\n    while (unvisited.length !== 0) {\r\n      this.sortNodesByDistance(unvisited);\r\n      const closestNode: any = unvisited.shift();\r\n      // If the closest node is at a distance of infinity,\r\n      // we must be trapped and should therefore stop.\r\n      if (closestNode?.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === endNode) return visitedNodesInOrder;\r\n      let neighbors = this.getUnvisitedNeighbors(closestNode, grid);\r\n      for (const neighbor of neighbors) {\r\n        let newDistance = closestNode.distance + neighbor.weight;\r\n        if (newDistance < neighbor.distance) {\r\n          neighbor.distance = newDistance;\r\n          neighbor.previous = closestNode;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  sortNodesByDistance(unvisitedNodes: Array<INodeProperties>): void {\r\n    unvisitedNodes.sort(\r\n      (nodeA: INodeProperties, nodeB: INodeProperties) =>\r\n        nodeA.distance - nodeB.distance\r\n    );\r\n  }\r\n}\r\nexport type TDijsktra = typeof Dijkstra;\r\n","/**\r\n *\r\n * @Project :  ${PathFinding Visualizer(Path Finding Visualizer)}\r\n * @CreatedBy ${Gunjan Kadu}\r\n * @Email  ${agunjan.kadu@gmail.com}\r\n * @Github https://github.com/GunjanKadu/\r\n * @date   2020-09-10 23:47:40\r\n *\r\n */\r\nimport React, { Component } from \"react\";\r\nimport Header from \"../TopBar/topbar\";\r\nimport Node from \"../Node/node\";\r\nimport Animator from \"../../Utility/Animator\";\r\nimport {\r\n  randomWalls,\r\n  recursiveDivision,\r\n} from \"../../Utility/RandomWalls/Mazes\";\r\nimport Grid from \"../../Utility/grid\";\r\nimport {\r\n  algo,\r\n  IGrid,\r\n  INodeProperties,\r\n  IVisualizerState,\r\n} from \"../../Utility/interfaces\";\r\nimport BellmanFord from \"../../Utility/Algorithms/BellmanFord\";\r\nimport BFS from \"../../Utility/Algorithms/BFS\";\r\nimport DFS from \"../../Utility/Algorithms/DFS\";\r\nimport Dijkstra from \"../../Utility/Algorithms/Dijkstra\";\r\n\r\nimport \"./board.css\";\r\nimport { DefaultValues } from \"../../Utility/constants\";\r\n\r\nexport default class Visualizer extends Component<{}, IVisualizerState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      algo: Dijkstra,\r\n      algoText: \"Dijkstra's\",\r\n      speed: \"Fast\",\r\n      grid: new Grid(\r\n        Dijkstra.weighted,\r\n        DefaultValues.DEFAULT_START,\r\n        DefaultValues.DEFAULT_END\r\n      ),\r\n      mouseIsPressed: false,\r\n      animator: new Animator(),\r\n      visualized: false,\r\n      start: DefaultValues.DEFAULT_START,\r\n      end: DefaultValues.DEFAULT_END,\r\n      movingStart: false,\r\n      movingEnd: false,\r\n      windowHeight: null,\r\n      windowWidth: null,\r\n    };\r\n\r\n    this.visualize = this.visualize.bind(this);\r\n    this.speedChange = this.speedChange.bind(this);\r\n    this.algoChange = this.algoChange.bind(this);\r\n    this.clearBoard = this.clearBoard.bind(this);\r\n    this.newWeights = this.newWeights.bind(this);\r\n    this.generateMaze = this.generateMaze.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.setState(\r\n      {\r\n        windowHeight: window.innerHeight,\r\n        windowWidth: window.innerWidth,\r\n      },\r\n      () => {\r\n        const { windowWidth, grid } = this.state;\r\n        if (windowWidth && windowWidth <= 1550 && windowWidth >= 1330) {\r\n          DefaultValues.setRoworColumn(30, \"columns\");\r\n\r\n          DefaultValues.setStartOrEnd([6, 24], \"end\");\r\n        } else if (windowWidth && windowWidth <= 1330) {\r\n          DefaultValues.setRoworColumn(25, \"columns\");\r\n          DefaultValues.setStartOrEnd([6, 19], \"end\");\r\n        } else {\r\n          DefaultValues.DefaultColumns = 35;\r\n        }\r\n        grid?.initializeGrid(\r\n          Dijkstra.weighted,\r\n          DefaultValues.DEFAULT_START,\r\n          DefaultValues.DEFAULT_END\r\n        );\r\n        this.setState({\r\n          grid: grid,\r\n          start: DefaultValues.DEFAULT_START,\r\n          end: DefaultValues.DEFAULT_END,\r\n        });\r\n      }\r\n    );\r\n  }\r\n  handleMouseDown(row: number, col: number) {\r\n    const { grid, start, end, visualized } = this.state;\r\n    if (visualized) return;\r\n    if (start && end) {\r\n      if (row === start[0] && col === start[1]) {\r\n        this.setState({ movingStart: true });\r\n      } else if (row === end[0] && col === end[1]) {\r\n        this.setState({ movingEnd: true });\r\n      } else {\r\n        grid && grid.toggleWall(row, col);\r\n      }\r\n      this.setState({ grid: grid, mouseIsPressed: true });\r\n    }\r\n  }\r\n\r\n  handleMouseEnter(row: number, col: number) {\r\n    const {\r\n      grid,\r\n      start,\r\n      end,\r\n      mouseIsPressed,\r\n      movingStart,\r\n      movingEnd,\r\n      visualized,\r\n    } = this.state;\r\n    if (!mouseIsPressed || visualized) return;\r\n    if (start && end) {\r\n      if (movingStart) {\r\n        grid && grid.toggleStart(row, col);\r\n        grid && grid.toggleStart(start[0], start[1]);\r\n        this.setState({\r\n          start: [row, col],\r\n          movingStart: true,\r\n        });\r\n      } else if (movingEnd) {\r\n        grid && grid.toggleEnd(row, col);\r\n        grid && grid.toggleEnd(end[0], end[1]);\r\n        this.setState({ end: [row, col], movingEnd: true });\r\n      } else {\r\n        grid && grid.toggleWall(row, col);\r\n      }\r\n      this.setState({\r\n        grid: grid,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    const { visualized } = this.state;\r\n    if (visualized) return;\r\n    this.setState({\r\n      mouseIsPressed: false,\r\n      movingStart: false,\r\n      movingEnd: false,\r\n    });\r\n  }\r\n\r\n  algoChange(text: string) {\r\n    const { grid, start, end, visualized } = this.state;\r\n    if (visualized) return;\r\n    if (start && end && grid) {\r\n      const algo: {\r\n        newAlgo: algo | null;\r\n        newAlgoText: string | null;\r\n        newGrid: IGrid | null;\r\n      } = { newAlgo: null, newAlgoText: null, newGrid: null };\r\n\r\n      this.unvisitNodes(false, start, end);\r\n      switch (text) {\r\n        case \"Dijkstra\":\r\n          algo.newAlgo = Dijkstra;\r\n          algo.newAlgoText = \"Dijkstra's\";\r\n          algo.newGrid = new Grid(Dijkstra.weighted, start, end);\r\n          algo.newGrid.initializeGrid(true, start, end);\r\n\r\n          break;\r\n        case \"BFS\":\r\n          algo.newAlgo = BFS;\r\n          algo.newAlgoText = \"Breadth-First Search\";\r\n          algo.newGrid = new Grid(BFS.weighted, start, end);\r\n          algo.newGrid.initializeGrid(false, start, end);\r\n\r\n          break;\r\n        case \"DFS\":\r\n          algo.newAlgo = DFS;\r\n          algo.newAlgoText = \"Depth-First Search\";\r\n          algo.newGrid = new Grid(DFS.weighted, start, end);\r\n          algo.newGrid.initializeGrid(false, start, end);\r\n\r\n          break;\r\n        case \"Bellman-Ford\":\r\n          algo.newAlgo = BellmanFord;\r\n          algo.newAlgoText = \"Bellman-Ford\";\r\n          algo.newGrid = new Grid(BellmanFord.weighted, start, end);\r\n          algo.newGrid.initializeGrid(true, start, end);\r\n\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n      algo.newGrid = this.keepWalls(grid, algo.newGrid);\r\n      this.setState({\r\n        algo: algo.newAlgo,\r\n        algoText: algo.newAlgoText,\r\n        grid: algo.newGrid,\r\n      });\r\n    }\r\n  }\r\n\r\n  speedChange(text: string) {\r\n    const speeds: {\r\n      visitedSpeed: number | null;\r\n      shortestSpeed: number | null;\r\n    } = { visitedSpeed: null, shortestSpeed: null };\r\n    switch (text) {\r\n      case \"Slow\":\r\n        speeds.visitedSpeed = 75;\r\n        speeds.shortestSpeed = 375;\r\n        break;\r\n      case \"Average\":\r\n        speeds.visitedSpeed = 25;\r\n        speeds.shortestSpeed = 125;\r\n        break;\r\n      case \"Fast\":\r\n        speeds.visitedSpeed = 10;\r\n        speeds.shortestSpeed = 50;\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n    this.state.animator?.updateSpeed(speeds.visitedSpeed, speeds.shortestSpeed);\r\n  }\r\n\r\n  visualize() {\r\n    const { grid, algo, visualized, start, end, animator } = this.state;\r\n    if (visualized) return;\r\n    if (grid && start && end && algo && animator) {\r\n      this.unvisitNodes(false, start, end);\r\n      this.setState({ visualized: true });\r\n      const traverser = new algo();\r\n      const startNode = grid.grid[start[0]][start[1]];\r\n      const endNode = grid.grid[end[0]][end[1]];\r\n      if (startNode.isWall) {\r\n        startNode.isWall = !startNode.isWall;\r\n      }\r\n      if (endNode.isWall) {\r\n        endNode.isWall = !endNode.isWall;\r\n      }\r\n      let visitedNodesInOrder:\r\n        | Array<INodeProperties>\r\n        | undefined = traverser.traverse(grid.grid, startNode, endNode);\r\n      let shortestPath = traverser.getShortestPath(startNode, endNode);\r\n      if (visitedNodesInOrder) {\r\n        animator?.animate(visitedNodesInOrder, shortestPath);\r\n        let buttonLockTime =\r\n          visitedNodesInOrder.length * animator.visitedSpeed +\r\n          shortestPath.length * animator.shortestSpeed;\r\n        setTimeout(() => this.setState({ visualized: false }), buttonLockTime);\r\n      }\r\n    }\r\n  }\r\n\r\n  unvisitNodes(removeWalls: boolean, start: Array<number>, end: Array<number>) {\r\n    const { grid } = this.state;\r\n    for (let row = 0; row < DefaultValues.DefaultRows; row++) {\r\n      for (let col = 0; col < DefaultValues.DefaultColumns; col++) {\r\n        let node: INodeProperties | undefined = grid?.grid[row][col];\r\n        if (node) {\r\n          const newLocal = document.getElementById(\r\n            `node-${node.row}-${node.col}`\r\n          );\r\n          if (newLocal) newLocal.className = \"node \";\r\n          node.isVisited = false;\r\n          node.previous = null;\r\n          node.distance = Infinity;\r\n          if (removeWalls) {\r\n            node.isWall = false;\r\n          } else if (node.isWall) {\r\n            const newLocal_1 = document.getElementById(\r\n              `node-${node.row}-${node.col}`\r\n            );\r\n            if (newLocal_1) newLocal_1.className = \"node node-wall\";\r\n          }\r\n          if (row === start[0] && col === start[1]) {\r\n            const newLocal_2 = document.getElementById(\r\n              `node-${start[0]}-${start[1]}`\r\n            );\r\n            if (newLocal_2) newLocal_2.className = \"node node-start\";\r\n            node.isStart = true;\r\n          }\r\n          if (row === end[0] && col === end[1]) {\r\n            const newLocal_3 = document.getElementById(\r\n              `node-${end[0]}-${end[1]}`\r\n            );\r\n            if (newLocal_3) newLocal_3.className = \"node node-end\";\r\n            node.isEnd = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.setState({ grid: grid, visualized: false });\r\n  }\r\n\r\n  clearBoard() {\r\n    const { visualized } = this.state;\r\n    if (visualized) return;\r\n    this.unvisitNodes(\r\n      true,\r\n      DefaultValues.DEFAULT_START,\r\n      DefaultValues.DEFAULT_END\r\n    );\r\n    this.setState({\r\n      start: DefaultValues.DEFAULT_START,\r\n      end: DefaultValues.DEFAULT_END,\r\n    });\r\n  }\r\n\r\n  newWeights() {\r\n    const { grid, algo, start, end, visualized } = this.state;\r\n    if (visualized) return;\r\n    if (start && algo && grid && end) {\r\n      this.unvisitNodes(false, start, end);\r\n      const newGrid = new Grid(algo.weighted, start, end);\r\n      newGrid.initializeGrid(algo.weighted, start, end);\r\n      for (let row = 0; row < DefaultValues.DefaultRows; row++) {\r\n        for (let col = 0; col < DefaultValues.DefaultColumns; col++) {\r\n          if (grid.grid[row][col].isWall) {\r\n            newGrid.grid[row][col].isWall = true;\r\n          }\r\n        }\r\n      }\r\n      this.setState({ grid: newGrid });\r\n    }\r\n  }\r\n\r\n  keepWalls(grid: IGrid, newGrid: IGrid) {\r\n    for (let row = 0; row < DefaultValues.DefaultRows; row++) {\r\n      for (let col = 0; col < DefaultValues.DefaultColumns; col++) {\r\n        if (grid.grid[row][col].isWall) {\r\n          newGrid.grid[row][col].isWall = true;\r\n        }\r\n      }\r\n    }\r\n    return newGrid;\r\n  }\r\n\r\n  generateMaze(type: string) {\r\n    const { grid, start, end } = this.state;\r\n    if (grid && start && end) {\r\n      this.unvisitNodes(true, start, end);\r\n      switch (type) {\r\n        case \"Random\":\r\n          randomWalls(grid);\r\n          break;\r\n        case \"RecursiveDivision\":\r\n          recursiveDivision(grid);\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n      this.setState({ grid: grid });\r\n\r\n      this.unvisitNodes(false, start, end);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed, visualized, algo } = this.state;\r\n    return (\r\n      <div className=\"holder\">\r\n        <div className=\"header\">\r\n          <Header\r\n            visualize={this.visualize}\r\n            changeAlgo={this.algoChange}\r\n            changeSpeed={this.speedChange}\r\n            clearBoard={this.clearBoard}\r\n            changeWeights={this.newWeights}\r\n            visualized={visualized}\r\n            generateMaze={this.generateMaze}\r\n          ></Header>\r\n        </div>\r\n\r\n        <div className=\"body\">\r\n          <div className=\"information\">\r\n            <h3>{this.state.algoText} Algorithm</h3>\r\n            <p>{algo?.text}</p>\r\n          </div>\r\n          <div className=\"board\">\r\n            {grid?.grid.map((row, rowIndex) => {\r\n              return (\r\n                <div key={rowIndex}>\r\n                  {row.map((node, nodeIndex) => {\r\n                    const { row, col, isEnd, isStart, isWall, weight } = node;\r\n                    return (\r\n                      <Node\r\n                        key={nodeIndex}\r\n                        col={col}\r\n                        row={row}\r\n                        isEnd={isEnd}\r\n                        isStart={isStart}\r\n                        isWall={isWall}\r\n                        mouseIsPressed={mouseIsPressed}\r\n                        onMouseDown={(row: number, col: number) =>\r\n                          this.handleMouseDown(row, col)\r\n                        }\r\n                        onMouseEnter={(row: number, col: number) =>\r\n                          this.handleMouseEnter(row, col)\r\n                        }\r\n                        onMouseUp={() => this.handleMouseUp()}\r\n                        weight={weight}\r\n                      ></Node>\r\n                    );\r\n                  })}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/**\n *\n * @Project :  ${PathFinding Visualizer(Path Finding Visualizer)}\n * @CreatedBy ${Gunjan Kadu}\n * @Email  ${agunjan.kadu@gmail.com}\n * @Github https://github.com/GunjanKadu/\n * @date   2020-09-10 23:47:40\n *\n */\nimport React from \"react\";\nimport \"./App.css\";\nimport Board from \"./Components/Board/board\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/**\n *\n * @Project :  ${PathFinding Visualizer(Path Finding Visualizer)}\n * @CreatedBy ${Gunjan Kadu}\n * @Email  ${agunjan.kadu@gmail.com}\n * @Github https://github.com/GunjanKadu/\n * @date   2020-09-10 23:47:40\n *\n */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}